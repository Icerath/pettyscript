trait Add {
    fn add(self: self, other: self) -> self;
}

trait Sub {
    fn sub(self: self, other: self) -> self;
}

trait Mul {
    fn mul(self: self, other: self) -> self;
}

trait Div {
    fn div(self: self, other: self) -> self;
}

trait Mod {
    fn mod(self: self, other: self) -> self;
}

enum Order {
    Less,
    Eq,
    Greater,
}

trait Ord {
    fn cmp(self: self, other: self) -> Order;
}

impl int {
    fn abs(self: self) -> self {
        return self.abs();
    }
}

impl Add for int {
    fn add(self: self, other: self) -> self {
        return self + other;
    }
}

impl Sub for int {
    fn sub(self: self, other: self) -> self {
        return self - other;
    }
}

impl Mul for int {
    fn mul(self: self, other: self) -> self {
        return self * other;
    }
}

impl Div for int {
    fn div(self: self, other: self) -> self {
        return self / other;
    }
}

impl Mod for int {
    fn mod(self: self, other: self) -> self {
        return self % other;
    }
}

impl Ord for int {
    fn cmp(self: self, other: self) -> Order {
        if self < other {
            return Order:Less;
        } else if self > other {
            return Order:Greater;
        } else {
            return Order:Eq;
        }
    }
}

trait Display {
    fn to_str(self: self) -> str;
}

impl Display for int {
    fn to_str(self: self) -> str {
        return f"{self}";
    }
}

impl Display for str {
    fn to_str(self: self) -> str {
        return self;
    }
}

impl Display for bool {
    fn to_str(self: self) -> str {
        if self { return "true"; } else { return "false"; }
    }
}

impl Display for char {
    fn to_str(self: self) -> str {
        return f"{self}";
    }
}