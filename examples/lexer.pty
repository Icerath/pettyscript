// Slowly building a lexer using pettyscript.

struct Lexer { str: str, remaining: str }

enum Token {
    LParen,
    RParen,
    LBrace,
    RBrace,
    LBracket,
    RBracket,
    Comma,
    Dot,
    Bang,
    Semicolon,
    Colon,
    Plus,
    Minus,
    Star,
    Slash,
    Percent,
    Pipe,
    Ampersand,
    RAngle,
    LAngle,
    RAngleEq,
    LAngleEq,
    Eq,
    EqEq,
    BangEq,
    Range,
    RangeInclusive,
    // Keywords
    Or,
    And,
    If,
    Else,
    In,
    Fn,
    For,
    Break,
    Return,
    Struct,
    Enum,
    // Literals
    Int,
    Character,
    String,
    FString,
    Ident,
}

fn lexer_next(lexer: Lexer) -> Token {
    let rem = lexer.remaining.trim();
    const first_char = rem[0];
  // FIXME: Provide a better way to handle default values or late initialization
    let token = Token.Ident;

    while true {
        let skip = 1;

        if rem.starts_with("//") {
            let i = 2;
            while i < rem.len() && rem[i] != '\n' {
                i = i + 1;
            }
            rem = rem[i..rem.len()];
            continue;
        }
        // Keywords
        else if rem.starts_with("or") { token = Token.Or; skip = 2; }
        else if rem.starts_with("||") { token = Token.Or; skip = 2; }
        else if rem.starts_with("and") { token = Token.And; skip = 3; }
        else if rem.starts_with("&&") { token = Token.And; skip = 2; }
        else if rem.starts_with("if") { token = Token.If; skip = 2; }
        else if rem.starts_with("else") { token = Token.Else; skip = 4; }
        else if rem.starts_with("in") { token = Token.In; skip = 2; }
        else if rem.starts_with("fn") { token = Token.Fn; skip = 2; }
        else if rem.starts_with("for") { token = Token.For; skip = 3; }
        else if rem.starts_with("break") { token = Token.Break; skip = 5; }
        else if rem.starts_with("return") { token = Token.Return; skip = 6; }
        else if rem.starts_with("struct") { token = Token.Struct; skip = 6; }
        else if rem.starts_with("enum") { token = Token.Enum; skip = 4; }
        // Symbols
        else if rem.starts_with("==") { token = Token.EqEq; skip = 2; }
        else if rem.starts_with("!=") { token = Token.BangEq; skip = 2; }
        else if rem.starts_with("<=") { token = Token.LAngleEq; skip = 2; }
        else if rem.starts_with(">=") { token = Token.RAngleEq; skip = 2; }
        else if rem.starts_with("..=") { token = Token.RangeInclusive; skip = 3; }else if first_char == '[' { token = Token.LBracket; }
        else if rem.starts_with("..") { token = Token.Range; skip = 2; }
        else if first_char == ']' { token = Token.RBracket; }
        else if first_char == '(' { token = Token.LParen; }
        else if first_char == ')' { token = Token.RParen; }
        else if first_char == '{' { token = Token.LBrace; }
        else if first_char == '}' { token = Token.RBrace; }
        else if first_char == '<' { token = Token.LAngle; }
        else if first_char == '>' { token = Token.RAngle; }
        else if first_char == ';' { token = Token.Semicolon; }
        else if first_char == ':' { token = Token.Colon; }
        else if first_char == ',' { token = Token.Comma; }
        else if first_char == '.' { token = Token.Dot; }
        else if first_char == '+' { token = Token.Plus; }
        else if first_char == '-' { token = Token.Minus; }
        else if first_char == '*' { token = Token.Star; }
        else if first_char == '/' { token = Token.Slash; }
        else if first_char == '%' { token = Token.Percent; }
        else if first_char == '|' { token = Token.Pipe; }
        else if first_char == '&' { token = Token.Ampersand; }
        else if first_char == '=' { token = Token.Eq; }
        // Literals
        else if first_char.is_digit() || first_char == '_' {
            while rem[skip].is_digit() {
                skip = skip + 1;
            }
            token = Token.Int;
        } else if first_char == '\'' {
            skip = skip + 2;
            token = Token.Character;
        } else if first_char == '"' {
            while rem[skip] != '"' {
                skip = skip + 1;
            }
            skip = skip + 1;
            token = Token.String;
        } else if rem.starts_with("f\"") {
            skip = skip + 1;
            while rem[skip] != '"' {
                skip = skip + 1;
            }
            skip = skip + 1;
            token = Token.FString;
        } else if first_char.is_alphabetic() {
            while rem[skip].is_alphabetic() {
                skip = skip + 1;
            }
            token = Token.Ident;
        } else {
            println(f"Invalid Symbol: {first_char}");
            exit(1);
        }
        lexer.remaining = rem[skip..rem.len()];
        return token;
    } 
}

fn main() {
    let str = read_file("examples/fizzbuzz.pty");
    let lexer = Lexer { str, remaining: str };
    while true {
        let token = lexer_next(lexer);
        println(f"{token}");
        if lexer.remaining == "" {
            break;
        }
    }
}
