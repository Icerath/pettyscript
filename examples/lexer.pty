// Slowly building a lexer using pettyscript.

struct Lexer { str, remaining }

enum Token {
    LParen,
    RParen,
    LBrace,
    RBrace,
    Comma,
    Dot,
    Bang,
    Semicolon,
    Plus,
    Minus,
    Star,
    Slash,
    Percent,
    Pipe,
    Ampersand,
    RAngle,
    LAngle,
    RAngleEq,
    LAngleEq,
    Eq,
    EqEq,
    BangEq,
    Range,
    RangeInclusive,
    // Keywords
    Or,
    And,
    If,
    Else,
    In,
    Fn,
    For,
    Return,
    Struct,
    Enum,
    // Literals
    Int,
    String,
    Ident,
}

fn lexer_next(lexer) {
    lexer.remaining = trim(lexer.remaining);
    let first_char = lexer.remaining[0];
    if first_char == '[' {
        lexer.remaining = lexer.remaining[1..lexer.remaining.len];
        return Token.LBracket;;
    }
}

fn main() {
    let str = open_file("examples/lexer.pty");
    let lexer = Lexer { str, remaining: str };

    while true {
        let token = lexer_next(lexer);
    }
}